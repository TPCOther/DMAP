# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
import torch
import torch.nn as nn
import torch
from torch.autograd import Variable
import copy
import torch.nn.functional as F
from torch.nn import CrossEntropyLoss, MSELoss
from torch.utils.data import SequentialSampler, DataLoader
import numpy as np

class attention_hook:
    def __init__(self, layer):
        self.layer = layer
        self.attentions = None
        self.hook = None
    
    def forward_hook(self, module, input, output):
        self.attentions = input[0]
        print(self.attentions.shape)
    
    def __enter__(self):
        self.hook = self.layer.register_forward_hook(self.forward_hook)
        return self.attentions
    
    def __exit__(self, type, value, traceback):
        if self.hook:
            self.hook.remove()

def get_extended_attention_mask(attention_mask, input_shape, device = None, dtype = None):
        if attention_mask.dim() == 3:
            extended_attention_mask = attention_mask[:, None, :, :]
        elif attention_mask.dim() == 2:
            extended_attention_mask = attention_mask[:, None, None, :]
        else:
            raise ValueError(
                f"Wrong shape for input_ids (shape {input_shape}) or attention_mask (shape {attention_mask.shape})"
            )

        extended_attention_mask = extended_attention_mask.to(dtype=torch.float16)  # fp16 compatibility
        extended_attention_mask = (1.0 - extended_attention_mask) * torch.finfo(torch.float16).min
        return extended_attention_mask
    
    
class Model(nn.Module):   
    def __init__(self, encoder,config,tokenizer,args):
        super(Model, self).__init__()
        self.encoder = encoder
        self.config=config
        self.tokenizer=tokenizer
        self.args=args
        self.query = 0
        
    def forward(self, input_ids=None,labels=None, inputs_embeds=None): 
        if inputs_embeds is not None:
            outputs=self.encoder(inputs_embeds=inputs_embeds,attention_mask=input_ids.ne(1))[0]
        else:
            outputs=self.encoder(input_ids,attention_mask=input_ids.ne(1))[0]
        logits=outputs
        prob=F.sigmoid(logits)
        if labels is not None:
            labels=labels.float()
            loss=torch.log(prob[:,0]+1e-10)*labels+torch.log((1-prob)[:,0]+1e-10)*(1-labels)
            loss=-loss.mean()
            return loss,prob
        else:
            return prob

    def get_results(self, dataset, batch_size):
        '''Given a dataset, return probabilities and labels.'''
        self.query += len(dataset)
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=4,pin_memory=False)

        self.eval()
        logits=[] 
        labels=[]
        for batch in eval_dataloader:
            inputs = batch[0].to("cuda")      
            label=batch[1].to("cuda") 
            with torch.no_grad():
                lm_loss,logit = self.forward(inputs,label)
                logits.append(logit.cpu().numpy())
                labels.append(label.cpu().numpy())
                
        logits=np.concatenate(logits,0)
        labels=np.concatenate(labels,0)

        probs = [[1 - prob[0], prob[0]] for prob in logits]
        pred_labels = [1 if label else 0 for label in logits[:,0]>0.5]

        return probs, pred_labels
    
    def get_attentions_output(self, dataset, layer, batch_size):
        # dataset = [[torch.tensor(x)] for x in dataset]
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=0,pin_memory=False)

        self.eval()
        attentions = []
        attention_masks = []
        attention_outputs = []
        for batch in eval_dataloader:
            inputs = batch[0].to("cuda")
            attention_mask=inputs.ne(1)
            attention_mask = get_extended_attention_mask(attention_mask, inputs.size(), inputs.device)
            with torch.no_grad():
                attention = self.encoder.roberta.embeddings(inputs)
                for i in range(layer):
                    attention = self.encoder.roberta.encoder.layer[i](attention, attention_mask)[0]
                attention_output = self.encoder.roberta.encoder.layer[layer].attention(attention, attention_mask)[0]
                attention_outputs.append(attention_output)
                attentions.append(attention)
                attention_masks.append(attention_mask)

        return torch.cat(attentions, 0), torch.cat(attention_masks, 0), torch.cat(attention_outputs, 0)
    
    def continue_forward(self, data, attention_masks, layer, batch_size):
        self.eval()
        
        # data = data.to("cuda")
        # attention_masks = attention_masks.to("cuda")

        logits = []
        for i in range(0, len(data), batch_size):
            batch = data[i:i+batch_size]
            attention_mask = attention_masks[i:i+batch_size]
            self.query += len(batch)
            with torch.no_grad():
                for i in range(layer, 12):
                    batch = self.encoder.roberta.encoder.layer[i](batch, attention_mask)[0]
                batch = self.encoder.classifier(batch)
                prob = F.sigmoid(batch)
            logits.append(prob.cpu().numpy())

        logits = np.concatenate(logits, 0)
        probs = [[1 - prob[0], prob[0]] for prob in logits]
        pred_labels = [1 if label else 0 for label in logits[:,0]>0.5]

        return probs, pred_labels

    
    
        
 