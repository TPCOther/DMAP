# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
import time
import torch
import torch.nn as nn
import torch
from torch.autograd import Variable
import copy
import torch.nn.functional as F
from torch.utils.data import SequentialSampler, DataLoader
from torch.nn import CrossEntropyLoss, MSELoss
import numpy as np

class Timer:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start_time = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end_time = time.time()
        self.elapsed_time = self.end_time - self.start_time
        print(f"{self.name} Elapsed time: {self.elapsed_time:.4f} seconds")

def get_extended_attention_mask(attention_mask, input_shape, device = None, dtype = None):
        if attention_mask.dim() == 3:
            extended_attention_mask = attention_mask[:, None, :, :]
        elif attention_mask.dim() == 2:
            extended_attention_mask = attention_mask[:, None, None, :]
        else:
            raise ValueError(
                f"Wrong shape for input_ids (shape {input_shape}) or attention_mask (shape {attention_mask.shape})"
            )

        extended_attention_mask = extended_attention_mask.to(dtype=torch.float32)  # fp16 compatibility
        extended_attention_mask = (1.0 - extended_attention_mask) * torch.finfo(torch.float32).min
        return extended_attention_mask


class Model(nn.Module):   
    def __init__(self, encoder,config,tokenizer,args):
        super(Model, self).__init__()
        self.encoder = encoder
        self.config=config
        self.tokenizer=tokenizer
        self.args=args
        self.query = 0
        
    def forward(self, inputs_ids=None, attn_mask=None, position_idx=None, labels = None, output_attentions = False, inputs_embeds=None):
        #embedding
        
        nodes_mask=position_idx.eq(0)
        token_mask=position_idx.ge(2)
        inputs_embeddings=self.encoder.roberta.embeddings.word_embeddings(inputs_ids)
        nodes_to_token_mask=nodes_mask[:,:,None]&token_mask[:,None,:]&attn_mask
        nodes_to_token_mask=nodes_to_token_mask/(nodes_to_token_mask.sum(-1)+1e-10)[:,:,None]
        avg_embeddings=torch.einsum("abc,acd->abd",nodes_to_token_mask,inputs_embeddings)
        inputs_embeddings=inputs_embeddings*(~nodes_mask)[:,:,None]+avg_embeddings*nodes_mask[:,:,None]  
        
        if inputs_embeds is not None:
            outputs = self.encoder(inputs_embeds=inputs_embeds,attention_mask=attn_mask,position_ids=position_idx, token_type_ids = position_idx.eq(-1).long(), output_attentions = output_attentions)
        else:
            outputs = self.encoder(inputs_embeds=inputs_embeddings,attention_mask=attn_mask,position_ids=position_idx, token_type_ids = position_idx.eq(-1).long(), output_attentions = output_attentions)

        if output_attentions:
            return outputs.attentions
        
        outputs=outputs[0]
        logits=outputs
        prob=F.sigmoid(logits)
        if labels is not None:
            labels=labels.float()
            loss=torch.log(prob[:,0]+1e-10)*labels+torch.log((1-prob)[:,0]+1e-10)*(1-labels)
            loss=-loss.mean()
            return loss,prob
        else:
            return prob
      
    def get_results(self, dataset, batch_size):
        '''Given a dataset, return probabilities and labels.'''
        self.query += len(dataset)
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=0,pin_memory=False)

        self.eval()
        logits=[] 
        labels=[]
        for batch in eval_dataloader:
            inputs_ids = batch[0].to("cuda")       
            attn_mask = batch[1].to("cuda") 
            position_idx = batch[2].to("cuda") 
            label=batch[3].to("cuda")  
            with torch.no_grad():
                lm_loss,logit = self.forward(inputs_ids, attn_mask, position_idx, label)
                logits.append(logit.cpu().numpy())
                labels.append(label.cpu().numpy())
                
        logits=np.concatenate(logits,0)
        labels=np.concatenate(labels,0)

        probs = [[1 - prob[0], prob[0]] for prob in logits]
        pred_labels = [1 if label else 0 for label in logits[:,0]>0.5]

        return probs, pred_labels
        
    def get_attentions(self, dataset, batch_size):
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=4,pin_memory=False)

        self.eval()
        attentions = []
        for batch in eval_dataloader:
            inputs_ids = batch[0].to("cuda")
            attn_mask = batch[1].to("cuda")
            position_idx = batch[2].to("cuda")
            with torch.no_grad():
                attention = self.forward(inputs_ids, attn_mask, position_idx, output_attentions=True)
                attentions.append(tuple(att.detach().cpu() for att in attention))
            print(len(attention[0]), attention[0].shape)
        return attentions
    
    def get_attentions_output(self, dataset, layer, batch_size):
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=0,pin_memory=False)

        self.eval()
        attentions = []
        attention_masks = []
        attention_outputs = []
        for batch in eval_dataloader:
            inputs_ids = batch[0].to("cuda")       
            attn_mask = batch[1].to("cuda") 
            position_idx = batch[2].to("cuda") 
            # label=batch[3].to("cuda")

            nodes_mask=position_idx.eq(0)
            token_mask=position_idx.ge(2)
            inputs_embeddings=self.encoder.roberta.embeddings.word_embeddings(inputs_ids)
            nodes_to_token_mask=nodes_mask[:,:,None]&token_mask[:,None,:]&attn_mask
            nodes_to_token_mask=nodes_to_token_mask/(nodes_to_token_mask.sum(-1)+1e-10)[:,:,None]
            avg_embeddings=torch.einsum("abc,acd->abd",nodes_to_token_mask,inputs_embeddings)
            attention=inputs_embeddings*(~nodes_mask)[:,:,None]+avg_embeddings*nodes_mask[:,:,None]
            attention_mask =  get_extended_attention_mask(attn_mask, attention.size()[:-1], attention.device)
        
            with torch.no_grad():
                attention = self.encoder.roberta.embeddings(position_ids=position_idx, token_type_ids=position_idx.eq(-1).long(),inputs_embeds=attention)
                for i in range(layer):
                    attention = self.encoder.roberta.encoder.layer[i](attention, attention_mask)[0]
                attention_output = self.encoder.roberta.encoder.layer[layer].attention(attention, attention_mask)[0]
                attention_outputs.append(attention_output)
                attentions.append(attention)
                attention_masks.append(attention_mask)
    
        attentions = torch.cat(attentions, 0)
        attention_masks = torch.cat(attention_masks, 0)
        attention_outputs = torch.cat(attention_outputs, 0)

        return attentions, attention_masks, attention_outputs
    
    def get_attentions_outputs(self, dataset, batch_size):
        eval_sampler = SequentialSampler(dataset)
        eval_dataloader = DataLoader(dataset, sampler=eval_sampler, batch_size=batch_size,num_workers=0,pin_memory=False)

        self.eval()
        attentions = []
        for batch in eval_dataloader:
            inputs_ids = batch[0].to("cuda")       
            attn_mask = batch[1].to("cuda") 
            position_idx = batch[2].to("cuda") 
            # label=batch[3].to("cuda")

            nodes_mask=position_idx.eq(0)
            token_mask=position_idx.ge(2)
            inputs_embeddings=self.encoder.roberta.embeddings.word_embeddings(inputs_ids)
            nodes_to_token_mask=nodes_mask[:,:,None]&token_mask[:,None,:]&attn_mask
            nodes_to_token_mask=nodes_to_token_mask/(nodes_to_token_mask.sum(-1)+1e-10)[:,:,None]
            avg_embeddings=torch.einsum("abc,acd->abd",nodes_to_token_mask,inputs_embeddings)
            attention=inputs_embeddings*(~nodes_mask)[:,:,None]+avg_embeddings*nodes_mask[:,:,None]
            attention_mask =  get_extended_attention_mask(attn_mask, attention.size()[:-1], attention.device)

            layer_attentions = []
            with torch.no_grad():
                attention = self.encoder.roberta.embeddings(position_ids=position_idx, token_type_ids=position_idx.eq(-1).long(),inputs_embeds=attention)
                for i in range(12):
                    attention = self.encoder.roberta.encoder.layer[i](attention, attention_mask, output_attentions=True)
                    attention_score = attention[1]
                    attention = attention[0]
                    layer_attentions.append(attention_score)
                attentions.append(torch.stack(layer_attentions, dim=1))

        return torch.cat(attentions, 0)
    
    def continue_forward(self, data, attention_masks, layer, batch_size):
        self.eval()

        logits = []
        for i in range(0, len(data), batch_size):
            batch = data[i:i+batch_size]
            attention_mask = attention_masks[i:i+batch_size]
            self.query += len(batch)
            with torch.no_grad():
                for i in range(layer, 12):
                    batch = self.encoder.roberta.encoder.layer[i](batch, attention_mask)[0]
                batch = self.encoder.classifier(batch)
                prob = F.sigmoid(batch)
            logits.append(prob.cpu().numpy())

        logits = np.concatenate(logits, 0)
        probs = [[1 - prob[0], prob[0]] for prob in logits]
        pred_labels = [1 if label else 0 for label in logits[:,0]>0.5]

        return probs, pred_labels